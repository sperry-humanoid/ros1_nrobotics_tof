#!/usr/bin/env python3
PACKAGE = "nr_tofcam_ros_dist"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


# ===

gen.add("fliplr", bool_t, 0, "Check if image should be flipped.", False)

# ===

camera_modes_modulation_frequency_enum = gen.enum([gen.const("24_MHz", int_t, 0, ""),
                                         gen.const("12_MHz", int_t, 1, ""),
                                         gen.const("6_MHz", int_t, 2, ""),
                                         gen.const("3_MHz", int_t, 3, ""),
                                         gen.const("1_5_MHz", int_t, 4, ""),
                                         gen.const("0_75_MHz", int_t, 5, "")],
                                         "")
gen.add("camera_modes_modulation_frequency", int_t, 0, "Set the modulation frequency for the TOFcam.", 1, 0, 5, edit_method=camera_modes_modulation_frequency_enum)

# ===

camera_modes_modulation_channel_enum = gen.enum([gen.const("0", int_t, 0, ""),
                                       gen.const("1", int_t, 1, ""),
                                       gen.const("2", int_t, 2, ""),
                                       gen.const("3", int_t, 3, ""),
                                       gen.const("4", int_t, 4, ""),
                                       gen.const("5", int_t, 5, ""),
                                       gen.const("6", int_t, 6, ""),
                                       gen.const("7", int_t, 7, ""),
                                       gen.const("8", int_t, 8, ""),
                                       gen.const("9", int_t, 9, ""),
                                       gen.const("10", int_t, 10, ""),
                                       gen.const("11", int_t, 11, ""),
                                       gen.const("12", int_t, 12, ""),
                                       gen.const("13", int_t, 13, ""),
                                       gen.const("14", int_t, 14, ""),
                                       gen.const("15", int_t, 15, "")],
                                       "")
gen.add("camera_modes_modulation_channel", int_t, 0, "Set the modulation channel for the TOFcam.", 0, 0, 15, edit_method=camera_modes_modulation_channel_enum)

# ===

camera_modes_hdr_mode_enum = gen.enum([gen.const("HDR_Off", int_t, 0, ""),
                             gen.const("HDR_Spatial", int_t, 1, ""),
                             gen.const("HDR_Temporal", int_t, 2, "")],
                             "")
gen.add("camera_modes_hdr_mode", int_t, 0, "Set the HDR mode for the camera.", 2, 0, 2, edit_method=camera_modes_hdr_mode_enum)

# ===

point_cloud_settings_lens_type_enum = gen.enum([gen.const("Wide_Field", int_t, 0, ""),
                                  gen.const("Narrow_Field", int_t, 1, ""),
                                  gen.const("Standard_Field", int_t, 2, "")],
                                  "")
gen.add("point_cloud_settings_lens_type", int_t, 0, "Set the lense type for the camera.", 0, 0, 2, edit_method=point_cloud_settings_lens_type_enum)

# ===

gen.add("integration_time_low", int_t, 0, "Set the integration time in us.", 40, 0, 4000)

# ===

gen.add("integration_time_mid", int_t, 0, "Set the integration time in us.", 400, 0, 4000)

# ===

gen.add("integration_time_high", int_t, 0, "Set the integration time in us.", 2000, 0, 4000)

# ===

gen.add("integration_time_grayscale", int_t, 0, "Set the integration time in us.", 25, 0, 44000)

# ===

gen.add("minimal_amplitude", int_t, 0, "Set minimal amplitude needed to be considered a valid distance estimation.", 100, 0, 1000)

# ===

gen.add("filters_median_filter", bool_t, 0, "", False)

# ===

gen.add("filters_average_filter", bool_t, 0, "", False)

# ===

gen.add("filters_edge_filter", bool_t, 0, "", False)

# ===

gen.add("filters_edge_filter_threshold", int_t, 0, "Set edge filter in mm.", 150, 0, 5000)

# ===

gen.add("filters_temporal_filter", bool_t, 0, "", False)

# ===

gen.add("filters_temporal_filter_threshold", int_t, 0, "Set temporal filter threshold in mm.", 300, 0, 1000)

# ===

gen.add("filters_temporal_filter_factor", double_t, 0, "Set temporal filter factor.", 0.1, 0.0, 1.0)

# ===

gen.add("filters_interference_detection", bool_t, 0, "", False)

# ===

gen.add("filters_interference_detection_limit", int_t, 0, "Set interference detection limit in LSB.", 1000, 0, 1000)

# ===

gen.add("filters_interference_detection_use_last_value", bool_t, 0, "Set interference detection use last value.", False)

# ===


exit(gen.generate(PACKAGE, "nr_tofcam_ros_dist_node", "nr_tofcam_ros_dist_"))
